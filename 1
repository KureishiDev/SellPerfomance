import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# 1. Coleta e Limpeza de Dados (Exemplo Simplificado)
# Substitua pelo seu arquivo de dados de vendas real
dados_vendas = pd.read_csv('dados_vendas.csv')

# 2. Análise Exploratória de Dados (EDA)
# Estatísticas descritivas
print(dados_vendas.describe())

# Distribuição das vendas
plt.figure(figsize=(10, 6))
sns.histplot(dados_vendas['valor_venda'], kde=True)
plt.title('Distribuição dos Valores de Venda')
plt.show()

# Vendas por região
vendas_regiao = dados_vendas.groupby('regiao')['valor_venda'].sum().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
vendas_regiao.plot(kind='bar')
plt.title('Vendas por Região')
plt.show()

# Vendas ao longo do tempo (exemplo com dados diários)
dados_vendas['data_venda'] = pd.to_datetime(dados_vendas['data_venda'])
vendas_tempo = dados_vendas.groupby('data_venda')['valor_venda'].sum()
plt.figure(figsize=(15, 6))
vendas_tempo.plot(kind='line')
plt.title('Vendas ao Longo do Tempo')
plt.show()

# 3. Visualização de Dados (Exemplos)
# Scatter plot da relação entre quantidade e valor da venda
plt.figure(figsize=(10, 6))
sns.scatterplot(x='quantidade', y='valor_venda', data=dados_vendas)
plt.title('Relação entre Quantidade e Valor da Venda')
plt.show()

# Boxplot das vendas por categoria de produto
plt.figure(figsize=(12, 6))
sns.boxplot(x='categoria_produto', y='valor_venda', data=dados_vendas)
plt.title('Vendas por Categoria de Produto')
plt.xticks(rotation=45, ha='right')
plt.show()

# 4. Modelagem Preditiva (Opcional - Exemplo de Regressão Linear)
# Preparação dos dados
features = ['quantidade', 'preco_unitario']  # Exemplo de features
target = 'valor_venda'

dados_modelo = dados_vendas.dropna(subset=features + [target])

X_train, X_test, y_train, y_test = train_test_split(dados_modelo[features], dados_modelo[target], test_size=0.2, random_state=42)

# Treinamento do modelo
modelo = LinearRegression()
modelo.fit(X_train, y_train)

# Avaliação do modelo
y_pred = modelo.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Erro Quadrático Médio (MSE): {mse}')

# 5. Documentação e GitHub
# (Crie um README.md e adicione comentários ao código)

# Observações importantes:

# * Substitua 'dados_vendas.csv' pelo seu arquivo de dados real.
# * Adapte as features e o target da modelagem preditiva de acordo com seus dados e objetivos.
# * Explore outras visualizações e análises para obter insights mais profundos.
# * Lembre-se de tratar os dados ausentes e inconsistentes de forma adequada.
# * Adapte o código conforme a necessidade, como por exemplo, a coluna de data para a analise de séries temporais.

# Como usar:

# 1. Instale as bibliotecas necessárias: pip install pandas matplotlib seaborn scikit-learn
# 2. Obtenha seus dados de vendas e crie um arquivo CSV.
# 3. Execute o código em um Jupyter Notebook ou ambiente Python.
# 4. Adapte o código e as análises para seus objetivos específicos.
# 5. Crie um repositório no GitHub para o projeto e adicione o código e a documentação.
